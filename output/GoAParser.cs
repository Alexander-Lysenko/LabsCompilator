//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g 2017-03-24 14:33:41

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Collections.Generic;
	


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Generated 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class GoAParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "EXPONENT", "FLOAT", "'('", "')'", "'*'", "'+'", "'-'", "'/'", "'^'", "'sqrt('"
	};
	public const int EOF=-1;
	public const int T__6=6;
	public const int T__7=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int EXPONENT=4;
	public const int FLOAT=5;

	public GoAParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public GoAParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return GoAParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g"; } }


		//private static Hashtable memory = new Hashtable();
		private Stack<double> _stack = new Stack<double>();


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_calc();
	partial void LeaveRule_calc();
	// $ANTLR start "calc"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:20:8: public calc returns [Stack<double> value] : e ;
	[GrammarRule("calc")]
	public Stack<double> calc()
	{
		EnterRule_calc();
		EnterRule("calc", 1);
		TraceIn("calc", 1);
		Stack<double> value = default(Stack<double>);


		try { DebugEnterRule(GrammarFileName, "calc");
		DebugLocation(20, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:21:2: ( e )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:21:5: e
			{
			DebugLocation(21, 5);
			PushFollow(Follow._e_in_calc57);
			e();
			PopFollow();

			DebugLocation(21, 7);
			value = _stack;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("calc", 1);
			LeaveRule("calc", 1);
			LeaveRule_calc();
		}
		DebugLocation(22, 1);
		} finally { DebugExitRule(GrammarFileName, "calc"); }
		return value;

	}
	// $ANTLR end "calc"

	partial void EnterRule_e();
	partial void LeaveRule_e();
	// $ANTLR start "e"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:24:1: e : t ep ;
	[GrammarRule("e")]
	private void e()
	{
		EnterRule_e();
		EnterRule("e", 2);
		TraceIn("e", 2);
		try { DebugEnterRule(GrammarFileName, "e");
		DebugLocation(24, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:24:3: ( t ep )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:24:4: t ep
			{
			DebugLocation(24, 4);
			PushFollow(Follow._t_in_e68);
			t();
			PopFollow();

			DebugLocation(24, 6);
			PushFollow(Follow._ep_in_e70);
			ep();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("e", 2);
			LeaveRule("e", 2);
			LeaveRule_e();
		}
		DebugLocation(25, 1);
		} finally { DebugExitRule(GrammarFileName, "e"); }
		return;

	}
	// $ANTLR end "e"

	partial void EnterRule_ep();
	partial void LeaveRule_ep();
	// $ANTLR start "ep"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:27:1: ep : ( '+' t ep | '-' t ep );
	[GrammarRule("ep")]
	private void ep()
	{
		EnterRule_ep();
		EnterRule("ep", 3);
		TraceIn("ep", 3);
		try { DebugEnterRule(GrammarFileName, "ep");
		DebugLocation(27, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:27:4: ( '+' t ep | '-' t ep )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==9))
			{
				alt1 = 1;
			}
			else if ((LA1_1==10))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:27:5: '+' t ep
				{
				DebugLocation(27, 5);
				Match(input,9,Follow._9_in_ep79); 
				DebugLocation(27, 8);
				PushFollow(Follow._t_in_ep80);
				t();
				PopFollow();

				DebugLocation(27, 10);
				PushFollow(Follow._ep_in_ep82);
				ep();
				PopFollow();

				DebugLocation(27, 13);
				_stack.Push(_stack.pop()+_stack.pop());

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:28:3: '-' t ep
				{
				DebugLocation(28, 3);
				Match(input,10,Follow._10_in_ep88); 
				DebugLocation(28, 6);
				PushFollow(Follow._t_in_ep89);
				t();
				PopFollow();

				DebugLocation(28, 8);
				PushFollow(Follow._ep_in_ep91);
				ep();
				PopFollow();

				DebugLocation(28, 11);
				double a = _stack.Pop();_stack.Push(_stack.Pop()-a);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ep", 3);
			LeaveRule("ep", 3);
			LeaveRule_ep();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "ep"); }
		return;

	}
	// $ANTLR end "ep"

	partial void EnterRule_t();
	partial void LeaveRule_t();
	// $ANTLR start "t"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:31:1: t : f tp ;
	[GrammarRule("t")]
	private void t()
	{
		EnterRule_t();
		EnterRule("t", 4);
		TraceIn("t", 4);
		try { DebugEnterRule(GrammarFileName, "t");
		DebugLocation(31, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:31:3: ( f tp )
			DebugEnterAlt(1);
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:31:4: f tp
			{
			DebugLocation(31, 4);
			PushFollow(Follow._f_in_t103);
			f();
			PopFollow();

			DebugLocation(31, 6);
			PushFollow(Follow._tp_in_t105);
			tp();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("t", 4);
			LeaveRule("t", 4);
			LeaveRule_t();
		}
		DebugLocation(32, 1);
		} finally { DebugExitRule(GrammarFileName, "t"); }
		return;

	}
	// $ANTLR end "t"

	partial void EnterRule_tp();
	partial void LeaveRule_tp();
	// $ANTLR start "tp"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:34:1: tp : ( '*' f tp | '/' f tp | '^' f tp );
	[GrammarRule("tp")]
	private void tp()
	{
		EnterRule_tp();
		EnterRule("tp", 5);
		TraceIn("tp", 5);
		try { DebugEnterRule(GrammarFileName, "tp");
		DebugLocation(34, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:34:4: ( '*' f tp | '/' f tp | '^' f tp )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 8:
				{
				alt2 = 1;
				}
				break;
			case 11:
				{
				alt2 = 2;
				}
				break;
			case 12:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:34:5: '*' f tp
				{
				DebugLocation(34, 5);
				Match(input,8,Follow._8_in_tp114); 
				DebugLocation(34, 9);
				PushFollow(Follow._f_in_tp116);
				f();
				PopFollow();

				DebugLocation(34, 11);
				PushFollow(Follow._tp_in_tp118);
				tp();
				PopFollow();

				DebugLocation(34, 14);
				_stack.Push(_stack.Pop()*_stack.Pop())

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:35:3: '/' f tp
				{
				DebugLocation(35, 3);
				Match(input,11,Follow._11_in_tp124); 
				DebugLocation(35, 7);
				PushFollow(Follow._f_in_tp126);
				f();
				PopFollow();

				DebugLocation(35, 9);
				PushFollow(Follow._tp_in_tp128);
				tp();
				PopFollow();

				DebugLocation(35, 12);
				double a = _stack.pop();_stack.Push(_stack.Pop()/a);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:36:3: '^' f tp
				{
				DebugLocation(36, 3);
				Match(input,12,Follow._12_in_tp134); 
				DebugLocation(36, 7);
				PushFollow(Follow._f_in_tp136);
				f();
				PopFollow();

				DebugLocation(36, 9);
				PushFollow(Follow._tp_in_tp138);
				tp();
				PopFollow();

				DebugLocation(36, 12);
				double a = _stack.pop();_stack.Push(Math.Pow(_stack.pop(),a));

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tp", 5);
			LeaveRule("tp", 5);
			LeaveRule_tp();
		}
		DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "tp"); }
		return;

	}
	// $ANTLR end "tp"

	partial void EnterRule_f();
	partial void LeaveRule_f();
	// $ANTLR start "f"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:39:1: f : ( '-' fp | ( '+' )? fp );
	[GrammarRule("f")]
	private void f()
	{
		EnterRule_f();
		EnterRule("f", 6);
		TraceIn("f", 6);
		try { DebugEnterRule(GrammarFileName, "f");
		DebugLocation(39, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:39:3: ( '-' fp | ( '+' )? fp )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==10))
			{
				alt4 = 1;
			}
			else if (((LA4_1>=FLOAT && LA4_1<=6)||LA4_1==9||LA4_1==13))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:39:4: '-' fp
				{
				DebugLocation(39, 4);
				Match(input,10,Follow._10_in_f149); 
				DebugLocation(39, 8);
				PushFollow(Follow._fp_in_f151);
				fp();
				PopFollow();

				DebugLocation(39, 11);
				_stack.Push(-_stack.pop())

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:40:3: ( '+' )? fp
				{
				DebugLocation(40, 3);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:40:3: ( '+' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==9))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:40:3: '+'
					{
					DebugLocation(40, 3);
					Match(input,9,Follow._9_in_f157); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(40, 8);
				PushFollow(Follow._fp_in_f160);
				fp();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("f", 6);
			LeaveRule("f", 6);
			LeaveRule_f();
		}
		DebugLocation(41, 1);
		} finally { DebugExitRule(GrammarFileName, "f"); }
		return;

	}
	// $ANTLR end "f"

	partial void EnterRule_fp();
	partial void LeaveRule_fp();
	// $ANTLR start "fp"
	// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:43:1: fp : (a1= FLOAT | '(' e ')' | 'sqrt(' e ')' );
	[GrammarRule("fp")]
	private void fp()
	{
		EnterRule_fp();
		EnterRule("fp", 7);
		TraceIn("fp", 7);
		IToken a1 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "fp");
		DebugLocation(43, 1);
		try
		{
			// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:43:4: (a1= FLOAT | '(' e ')' | 'sqrt(' e ')' )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case FLOAT:
				{
				alt5 = 1;
				}
				break;
			case 6:
				{
				alt5 = 2;
				}
				break;
			case 13:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:43:5: a1= FLOAT
				{
				DebugLocation(43, 7);
				a1=(IToken)Match(input,FLOAT,Follow._FLOAT_in_fp171); 
				DebugLocation(43, 14);
				_stack.Push(double.Pars(a1.value));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:44:3: '(' e ')'
				{
				DebugLocation(44, 3);
				Match(input,6,Follow._6_in_fp177); 
				DebugLocation(44, 6);
				PushFollow(Follow._e_in_fp178);
				e();
				PopFollow();

				DebugLocation(44, 7);
				Match(input,7,Follow._7_in_fp179); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\illus\\OneDrive\\?????????\\Visual Studio 2015\\Projects\\Compilators\\GoA.g:45:3: 'sqrt(' e ')'
				{
				DebugLocation(45, 3);
				Match(input,13,Follow._13_in_fp183); 
				DebugLocation(45, 10);
				PushFollow(Follow._e_in_fp184);
				e();
				PopFollow();

				DebugLocation(45, 11);
				Match(input,7,Follow._7_in_fp185); 
				DebugLocation(45, 15);
				_stack.Push(Math.Sqrt(_stack.pop()));;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fp", 7);
			LeaveRule("fp", 7);
			LeaveRule_fp();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "fp"); }
		return;

	}
	// $ANTLR end "fp"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _e_in_calc57 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _t_in_e68 = new BitSet(new ulong[]{0x600UL});
		public static readonly BitSet _ep_in_e70 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _9_in_ep79 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _t_in_ep80 = new BitSet(new ulong[]{0x600UL});
		public static readonly BitSet _ep_in_ep82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _10_in_ep88 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _t_in_ep89 = new BitSet(new ulong[]{0x600UL});
		public static readonly BitSet _ep_in_ep91 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _f_in_t103 = new BitSet(new ulong[]{0x1900UL});
		public static readonly BitSet _tp_in_t105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _8_in_tp114 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _f_in_tp116 = new BitSet(new ulong[]{0x1900UL});
		public static readonly BitSet _tp_in_tp118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _11_in_tp124 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _f_in_tp126 = new BitSet(new ulong[]{0x1900UL});
		public static readonly BitSet _tp_in_tp128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _12_in_tp134 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _f_in_tp136 = new BitSet(new ulong[]{0x1900UL});
		public static readonly BitSet _tp_in_tp138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _10_in_f149 = new BitSet(new ulong[]{0x2060UL});
		public static readonly BitSet _fp_in_f151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _9_in_f157 = new BitSet(new ulong[]{0x2060UL});
		public static readonly BitSet _fp_in_f160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_fp171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _6_in_fp177 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _e_in_fp178 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _7_in_fp179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_fp183 = new BitSet(new ulong[]{0x2660UL});
		public static readonly BitSet _e_in_fp184 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _7_in_fp185 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Generated 
